/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        queue<TreeNode*> Q;
        TreeNode* temp=new TreeNode();
        Q.push(root);
        int count=0;
        double avg;
        int counter = 0;
        int pA = 0;
        int pB = 0;
        while(!Q.empty())
        {
            counter++;
            int count=Q.size();
            double sum=0;
            for(int i=0;i<count;i++)
            {
                temp=Q.front();
                if(temp->left!=NULL)
                {
                    Q.push(temp->left);
                }
                if (temp->val == x || temp->val == y){
                    if (pA == 0){
                        pA = counter;
                    }
                    else{
                        pB =counter;
                    }
                }
                if(temp->right!=NULL)
                {
                    Q.push(temp->right);
                }
                if (temp->left!=NULL && temp->right!=NULL){
                    if (temp->left->val == x || temp->left->val == y){
                        if (temp->right->val == x || temp->right->val == y){
                            return false;
                        }
                    }
                }
                Q.pop();
            }
        }
        if (pA == pB && (pA != 0 && pB != 0)){
            return true;
        }
        return false;
    }
};